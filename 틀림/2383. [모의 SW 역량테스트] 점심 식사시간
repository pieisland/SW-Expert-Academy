#include<iostream>
#include<string>
#include <math.h>
#include <vector>
#include <algorithm>
#include <queue>
using namespace std;

/*
200422
정말 개같네.
*/

int n;
int map[11][11];
int personPos[10][2];
int stairPos[2][2];
int sel[11];
int answer;

int func(int personCnt) {
	int isgo[10];
	int remainTime[10];
	int arriveTime[10];

	for (int i = 0; i < personCnt; i++) {
		int stairIdx = sel[i];
		int time = 0;
		int y, x;
		y = stairPos[stairIdx][0] - personPos[i][0] > 0 ? stairPos[stairIdx][0] - personPos[i][0] : -stairPos[stairIdx][0] + personPos[i][0];
		x = stairPos[stairIdx][1] - personPos[i][1] > 0 ? stairPos[stairIdx][1] - personPos[i][1] : -stairPos[stairIdx][1] + personPos[i][1];

		arriveTime[i] = y + x;

		//remaintime은 어떻게 하지..?

		remainTime[i] = map[stairPos[stairIdx][0]][stairPos[stairIdx][1]];
	}

	int maxVal = 0;
	for (int i = 0; i < 2; i++) {
		int second = 0;
		int instair = 0;
		int arrivedCnt = 0;
		int tostair;
		for (int j = 0; j < personCnt; j++) {
			if (sel[j] == i) arrivedCnt++;
		}
		int tmp = 0;
		while (1) {
			if (arrivedCnt == tmp) break;
			
			//이동할 수 있는 애들 이동하게 만들어준다.
			//이미 기다렸던 애들이기 때문에 굳이 기다릴 필요 없을걸..?
			tostair = 3 - instair;
			for (int j = 0; j < personCnt; j++) {
				if (tostair == 0) break;
				if (isgo[j] == -1) { //이전에 한 애들은 다 내려가서 1로 바꼈기 때문에 그냥 -1이라고 해도 될거야.
					tostair--;
					isgo[j] = 1;
				}
			}
			//시간 증가
			second++;

			//갈 수 있는 애들과 못가는 애들 분리함.
			for (int j = 0; j < personCnt; j++) {
				if (sel[j] == i) {
					if (arriveTime[j] == second) {
						cout << j + 1 << "가 계단에 도착한 시간 " << second << endl;

						if (instair < 3) {
							instair++;
							isgo[j] = 1;
							remainTime[j] += 2;
						}
						else if (instair >= 3) {
							isgo[j] = -1;
							//remainTime[j] = 1;
						}
					}
				}
			}

			//갈 수 있는 애들은 움직임.
			for (int j = 0; j < personCnt; j++) {
				if (sel[j] == i) {
					if (isgo[j] == 1) {
						remainTime[j]--;
						if (remainTime[j] == 0) {
							isgo[j] = 0;
							tmp++;
							instair--;
							cout << j+1 << "번째가 도착했다 시간은 " << second << endl;
						}
					}
				}
			}
		}

		//2개 중에서 더 오래걸린 게 최종임.
		if (maxVal < second) maxVal = second;
	}

	return maxVal;
}


void dfs(int cnt, int personCnt) {
	if (cnt == personCnt) {

		for (int i = 0; i < personCnt; i++) {
			cout << sel[i] << " ";
		}
		cout << endl;
		
		int tmp = func(personCnt);

		if (tmp < answer) answer = tmp;

		return;
	}

	for (int i = 0; i < 2; i++) {
		sel[cnt] = i; //어차피 덮어써져서 상관없다고 생각했는데
		//문제가 생길까..?
		dfs(cnt + 1, personCnt);
	}
}

int main(void) {

	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	
	int tc;
	cin >> tc;
	
	for (int t = 1; t <= tc; t++) {
		cin >> n;
		int p = 0;
		int s = 0;
		answer = 987654321;
		for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= n; j++) {
				cin >> map[i][j];
				if (map[i][j] == 1) {
					personPos[p][0] = i;
					personPos[p++][1] = j;
				}
				else if (map[i][j] > 1) {
					stairPos[s][0] = i;
					stairPos[s++][1] = j;
				}
			}
		}

		//몇 개 골랐냐, 몇 명을 골라야 되나
		dfs(0, p);

		cout << "#" << t << " " << answer << '\n';
	}

	return 0;
}
