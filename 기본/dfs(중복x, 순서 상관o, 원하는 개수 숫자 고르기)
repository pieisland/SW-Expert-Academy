#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
#include<queue>
using namespace std;

/*
200314
dfs(중복x, 순서 상관o, 원하는 개수 숫자 고르기)
배열 하나로 선택한 것들을 골라낼 수는 있지만
배열을 출력할 때 선택한 순서대로 출력을 보일 수가 없으니
(배열 시작부터 끝까지 그냥 출력하니까. 언제 선택했냐에 상관없이)
벡터를 사용하는 거다.
벡터를 사용하면 선택한 순서대로 저장할 수 있어서
원하는 결과를 보일 수 있다.

이건 start를 증가시키는 게 아니기 때문에
(증가순으로 선택하는 게 아니라서)
앞에서 풀었던 문제들처럼 start에 따른 return 처리는 없다.

헷갈리지 말자.
*/

int sel[6];
vector<int> number;

void dfs2(int cnt, int n, int wantedSel) {
	if (cnt == wantedSel) {
		for (int i = 0; i < wantedSel; i++) {
			cout << number[i] << " ";
		}
		cout << endl;
		return;
	}

	for (int i = 0; i < n; i++) {
		if (sel[i]) continue;
		sel[i] = 1;
		number.push_back(i);
		dfs2(cnt + 1, n, wantedSel);
		number.pop_back();
		sel[i] = 0;
	}
	return;
}

int main(void){

	int n = 6;
	int wantedSel = 2;
	dfs2( 0, n, wantedSel);

	return 0;
}
