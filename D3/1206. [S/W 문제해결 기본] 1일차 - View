#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
#include<queue>

using namespace std;

/*
200316
1206. [S/W 문제해결 기본] 1일차 - View
간단하게 높이 체크만 하는 문제.
무슨 문제라고 분류하기도 애매하다.

배열을 인자로 넘기는 게 너무 오랜만이어서.. 잠시 헷갈렸다.
그리고 층 하나하나마다 해야되는데 최상 층 높이로 했어서
잘못나왔었다.

쉬운 문제인데 시간 많이 걸려서 기분 나쁨.
*/

int leftView(int floor, int idx, int building[1000]) {
	int left = 0;

	for (int i = idx - 1; i >= 0; i--) {
		if (floor> building[i]) {
			left++;
			if (idx == 1) left += 2;
		}
		else
		{
			//0으로하면 있던 것도 날라가니까 하면 안되겠찌...
			break;
		}
	}

	return left;
}

int rightView(int floor, int idx, int n, int building[1000]) {
	int right = 0;

	for (int i = idx + 1; i < n; i++) {
		if (floor > building[i]) {
			right++;
			if (idx == n - 1) right += 2;
		}
		else
			break;
	}

	return right;
}

int main() {

	for (int t = 1; t <= 10; t++) {
		int n;
		cin >> n;
		int building[1000] = {0,};
		int left = 0;
		int right = 0;
		int ans = 0;

		//높이를 저장한다.
		for (int i = 0; i < n; i++) {
			scanf("%d", &building[i]);
		}

		for (int i = 0; i < n; i++) {
			int h = building[i];

			for (int floor = 1; floor <= h; floor++) {
				if (i == 0) {
					left = 2;
					right = rightView(floor, i, n, building);
				}
				else if (i == n - 1) {
					right = 2;
					left = leftView(floor, i, building);
				}
				else
				{
					left = leftView(floor, i, building);
					right = rightView(floor, i, n, building);
				}

				if (left >= 2 && right >= 2)
				{
					ans++;
				}
			}			
		}
		printf("#%d %d\n", t, ans);
	}

	return 0;
}
