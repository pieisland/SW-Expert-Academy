#include<iostream>
#include<string>
#include <math.h>
#include <vector>
#include <algorithm>
#include <queue>
using namespace std;

/*
200422
6781. 삼삼 트리플 게임
너무 비효율적으로 풀어서 리팩토링 해야됨..
생각 자체를 다르게 해야될지도 모르겠다.
*/

int happyDay[5000];

//생각해보니 되게 이상하게 구해서.
//완전히 확정이 되어야 없애야되는데..
//그리고 반대로도 해야되는거더라.
int numCheck(string num, string color) {
	vector<int> vec[3];
	vector<int> vec2[3];

	for (int i = 0; i < 9; i++) {
		if (color[i] == 'R') {
			vec[0].push_back(num[i] - '0');
		}
		else if (color[i] == 'G') {
			vec[1].push_back(num[i] - '0');
		}
		else if (color[i] == 'B') {
			vec[2].push_back(num[i] - '0');
		}
	}

	for (int c = 0; c < 3; c++) {
		sort(vec[c].begin(), vec[c].end());
		vec2[c] = vec[c]; //이게 들어가나..?
	}	

	int check = 1;
	//증가부터 확인.
	for (int c = 0; c < 3; c++) {
		if (vec[c].size() == 0) continue;

		int upCnt = 0;
		for (int i = 0; i<vec[c].size(); i++) {
			if (vec[c][i] == -1) continue;
			int l = vec[c][i];
			int tmp[3] = { i, 0, 0 };
			int cnt = 1;
			for (int j = i + 1; j < vec[c].size(); j++) {
				if (vec[c][j] == l + 1) {
					tmp[cnt] = j;
					l++;
					cnt++;
					//vec[c][j] = -1;
				}
				if (cnt == 3) break;
			}
			if (cnt == 3) { 
				vec[c][tmp[0]] = -1;
				vec[c][tmp[1]] = -1;
				vec[c][tmp[2]] = -1;
				upCnt++; 
			}
		}

		int sameCnt = 0;
		for (int i = 0; i<vec[c].size(); i++) {
			if (vec[c][i] == -1) continue;
			int l = vec[c][i];
			int tmp[3] = { i, 0, 0 };
			int cnt = 1;
			for (int j = i + 1; j < vec[c].size(); j++) {
				if (vec[c][j] == l) {
					tmp[cnt] = j;
					cnt++;
					//vec[c][j] = -1;
				}
				if (cnt == 3) break;
			}
			if (cnt == 3) {
				vec[c][tmp[0]] = -1;
				vec[c][tmp[1]] = -1;
				vec[c][tmp[2]] = -1;

				sameCnt++;
			}
		}

		//cout << upCnt << " " << sameCnt << endl;
		//모든 수에 대해서 맞아야되는뎅..
		if (upCnt + sameCnt != vec[c].size() / 3)
		{
			check = 0;
			break;
		}
	}

	for (int c = 0; c < 3; c++) {
		vec[c] = vec2[c]; //이게 들어가나..?
	}

	//감소부터도 확인해야된다고..
	int check2 = 1;
	//증가부터 확인.
	for (int c = 0; c < 3; c++) {
		if (vec[c].size() == 0) continue;

		int sameCnt = 0;
		for (int i = 0; i<vec[c].size(); i++) {
			if (vec[c][i] == -1) continue;
			int l = vec[c][i];
			int tmp[3] = { i, 0, 0 };
			int cnt = 1;
			for (int j = i + 1; j < vec[c].size(); j++) {
				if (vec[c][j] == l) {
					tmp[cnt] = j;
					cnt++;
					//vec[c][j] = -1;
				}
				if (cnt == 3) break;
			}
			if (cnt == 3) {
				vec[c][tmp[0]] = -1;
				vec[c][tmp[1]] = -1;
				vec[c][tmp[2]] = -1;

				sameCnt++;
			}
		}

		int upCnt = 0;
		for (int i = 0; i<vec[c].size(); i++) {
			if (vec[c][i] == -1) continue;
			int l = vec[c][i];
			int tmp[3] = { i, 0, 0 };
			int cnt = 1;
			for (int j = i + 1; j < vec[c].size(); j++) {
				if (vec[c][j] == l + 1) {
					tmp[cnt] = j;
					l++;
					cnt++;
					//vec[c][j] = -1;
				}
				if (cnt == 3) break;
			}
			if (cnt == 3) {
				vec[c][tmp[0]] = -1;
				vec[c][tmp[1]] = -1;
				vec[c][tmp[2]] = -1;
				upCnt++;
			}
		}

		//cout << upCnt << " " << sameCnt << endl;
		//모든 수에 대해서 맞아야되는뎅..
		if (upCnt + sameCnt != vec[c].size() / 3)
		{
			check2 = 0;
			break;
		}
	}

	return (check||check2);
}

int main(void) {

	//이것 덕분에 굳이 pritf와 scanf를 안써도
	//시간 초과가 안나네요.
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	
	int tc;
	cin >> tc;
	
	for (int t = 1; t <= tc; t++) {
		string num, color;
		cin >> num >> color;

		int colorCnt[3] = {0,};
		for (int i = 0; i < color.size(); i++) {
			if (color[i] == 'R')
				colorCnt[0]++;
			else if (color[i] == 'G')
				colorCnt[1]++;
			else if (color[i] == 'B')
				colorCnt[2]++;
		}

		int check = 1;
		for (int i = 0; i < 3; i++) {
			if (colorCnt[i] % 3 != 0) {
				check = 0;
				break;
			}
		}

		//아..아니다 ㅋㅋ
		if (check == 0) {
			cout << "#" << t << " " << "Continue" << '\n';
		}
		else
		{
			check = numCheck(num, color);
			if(check==0) cout << "#" << t << " " << "Continue" << '\n';
			else
				cout << "#" << t << " " << "Win" << '\n';
		}
	}

	return 0;
}
