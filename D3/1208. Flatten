#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
#include<queue>
#include<math.h>
using namespace std;

/*
1208. [S/W 문제해결 기본] 1일차 - Flatten
평탄화하기.
가장 높은 것과 낮은 것을 찾아야하고
멈춤 조건,
결과적 정답에서 조금 헷갈릴 수 있다.
*/
int boxH[100];

int findMin() {
	int minH = 1000;
	int idx=0;
	for (int i = 0; i < 100; i++) {
		if (boxH[i] < minH) {
			minH = boxH[i];
			idx = i;
		}
	}
	return idx;
}

int findMax() {
	int maxH = 0;
	int idx=0;
	for (int i = 0; i < 100; i++) {
		if (boxH[i] > maxH) {
			maxH = boxH[i];
			idx = i;
		}
	}
	return idx;
}

int main()
{
	for (int t = 1; t <= 10; t++) {
		int dumpCnt;
		cin >> dumpCnt;

		for (int i = 0; i < 100; i++) {
			cin >> boxH[i];
			//높이를 받는다.
		}

		//가장 높은 위치와 가장 낮은 위치를 찾아서 평탄화 작업을 하자.
		int ans;
		for (int i = 0; i < dumpCnt; i++) {
			int minIdx = findMin();
			int maxIdx = findMax();
			//만약에 그렇게 찾은 게 동일하다면 평낱화 작업이 끝난 것이다.
			if (boxH[minIdx] == boxH[maxIdx]) {
				ans = 0;
				break;
			}
			boxH[minIdx] += 1;
			boxH[maxIdx] -= 1;

			//위에서 찾았던 가장 높은 것과 낮은 것을 바꾼 상태에서
			//다시 가장 높은 것과 낮은 것을 찾아야된다.
			//맨 처음에 잘못 나온 이유가 이 부분이었음.
			minIdx = findMin();
			maxIdx = findMax();
			ans = boxH[maxIdx] - boxH[minIdx];
		}
		cout << "#" << t << " " << ans << endl;
	}

	return 0;
}
