#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
#include<queue>
using namespace std;

/*
200314
9229. 한빈이와 Spot Mart(완전탐색?)
모든 경우의 수 라고 말하면 다 dfs로 풀어버리는 건 정답이 아닌가보다.
근데 그러면 그걸 어떻게 판단해야할까..
ㅠㅠ.

dfs로 두 번을 풀어봤는데 첫번째는 이상한 짓을 했고
두 번째는 제대로 푼 것 같지만 안나왔다.

dfs 풀면서 먼저 느꼈던 건 내가 매개변수를 너무 많이 넘기고 있다는것.
7개나 넘기면서 푸는 게 맞는건지..;
1. 시작하는 인덱스 2. 내가 선택한 스낵의 개수 3. 내가 선택한 스낵의 무게 
4. 모든 스낵 개수 5. 최대 과자합 무게 6. 골라야하는 스낵 개수 7. 모든 과자 무게 가지고 있는 벡터
변수명도 헷갈리고 난리였음..

dfs는 정답이 나오긴 하지만 시간초과가 났다,
가지치기를 한다고 했는데도 시간초과가 나오는건.. 무엇?
내가 한 가지치기는 이미 최대 허용 무게를 넘으면 return 하기
이거 말고 또 할 가지치기가 있음..??

dfs에서 이상하게 생각한 점.
과자를 선택한 경우, 선택하지 않은 경우라고 생각하고 dfs를 두 번 호출했는데
저렇게 하는게 첫번째 dfs로 돌린 게 꼭 과자를 선택한 경우가 된다고 할 수가 없다.
왜냐면.. 그 dfs 내로 들어가야 선택을 한건데
들어가지 않고 다음 반복문으로 넘어가면 그게 선택이 된 게 아님.

뭔가 이해하기 헷갈리기는 하지만 매개변수 자체 값을 변경한 게 저장되는 게 아니라서 그런듯.
그니까 a+1 만 했고 a = a+1 이렇게 다시 a를 변경하지 않았다는 소리.
으 헷갈려.
아무튼 그래서 과자를 선택한 경우라고 생각하고 돌린거에서도 모든 경우가 나온다.

dfs2에서 어차피 무게만 생각하고 누굴 선택했는지 알 필요가 없어서
벡터를 쓰지 않아도 된다는 점..
그냥 휑하니 ㅋㅋ 반복문 안에서 dfs2만 있으니까 너~ 무 어색했음.
사실 벡터를 사용하고 싶으면 벡터를 쓰고 무게 계산을 따로 하면 되긴 하지만
그럴 필요가 없으니까. 없어도 됨.
*/

vector<int> snacks;
int ans;

void dfs(int start, int mySnackCnt, int mySnackWeight, int allSnackCnt, int maxWeight , int maxSnack, vector<int> allSnack) {
	if (mySnackWeight > maxWeight)
		return;

	//무게가 넘지 않았고 두개를 다 골랐으면..
	if (mySnackCnt == maxSnack) {
		//int weightSum = 0;
		//mySnackWeight를 알고있다는 건.. 이미 처리 끝난 거 아냐??
		/*for (int i = 0; i < snacks.size(); i++) {
			int idx = snacks[i];
			weightSum += allSnack[idx];
		}*/
		//뭐.. 이미 무게를 알고있으니 무게만 비교하면 된다.
		if (mySnackWeight > ans)
			ans = mySnackWeight;
		return;
	}

	if (start >= allSnackCnt) {
		return;
	}

	for (int i = start; i < allSnackCnt; i++) {
		//과자를 선택한 경우
		dfs(start + 1, mySnackCnt+1, mySnackWeight + allSnack[i], allSnackCnt, maxWeight, maxSnack, allSnack);
		//선택하지 않은 경우
		dfs(start + 1, mySnackCnt, mySnackWeight, allSnackCnt, maxWeight, maxSnack, allSnack);
	}
}

//dfs로까지 할 필요가 없대..
void dfs2(int start, int mySnackCnt, int mySnackWeight, int allSnackCnt, int maxWeight, int maxSnack, vector<int> allSnack)
{
	if (mySnackWeight > maxWeight)
		return;

	//무게가 넘지 않았고 두개를 다 골랐으면..
	if (mySnackCnt == maxSnack) {
		//뭐.. 이미 무게를 알고있으니 무게만 비교하면 된다.
		if (mySnackWeight > ans)
			ans = mySnackWeight;
		return;
	}

	if (start >= allSnackCnt) {
		return;
	}

	for (int i = start; i < allSnackCnt; i++) {
		//snacks.push_back(i);
		dfs2(start + 1, mySnackCnt + 1, mySnackWeight + allSnack[i], allSnackCnt, maxWeight, maxSnack, allSnack);
		//snacks.pop_back();
	}
}

int main(void){
	int tc;
	scanf("%d", &tc);
	for (int i = 1; i <= tc; i++) {
		int n, m;
		scanf("%d %d", &n, &m);
		vector<int> snackWeight;
		//모든 과자의 무게를 담는다.
		for (int j = 0; j < n; j++) {
			int snack;
			scanf("%d", &snack);
			snackWeight.push_back(snack);
		}

		//그냥 2중 for문으로 돌면서 두 개를 선택하는데 무게가 최대무게를 넘으면 안된다는 것 정도.
		//원래 이렇게 풀길 바란 문제였을까..??
		for (int a = 0; a < n - 1; a++) {
			for (int b = a + 1; b < n; b++) {
				int weightSum = snackWeight[a] + snackWeight[b];
				if (weightSum > m) continue;
				ans = ans > weightSum ? ans : weightSum;
			}
		}
		if (ans == 0) ans = -1;
		printf("#%d %d\n", i, ans);
		ans = 0;

		/*dfs2(0, 0, 0, n, m, 2, snackWeight);
		if (ans == 0) ans = -1;
		printf("#%d %d\n", i, ans);
		snacks.clear(); 
		ans = 0;*/
	}

	return 0;
}
