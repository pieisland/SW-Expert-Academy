#include<iostream>
#include<vector>
#include<queue>
#include <string>

using namespace std;

/*
1247. 최적 경로
dfs 쉬운 문제. 효율적으로 짤 필요도 없어서
그냥 모든 경우의 수를 확인해보면 되는 문제.
가지치기를 해주기는 했지만 그래도 느리긴 하더라.

문제를 제대로 읽어야되는 게 
회사 위치, 집 위치, 고객 위치다.
ㅠㅠ.. 위치를 반대로 받아서 이상한 답 나와서 시간 날림.
*/

int company[2];
int home[2];
int sel[10];
int n;
vector<pair<int, int>> customer;
int ans;
int cnt = 0;

vector<int> selecting;

void selInit() {
	for (int i = 0; i < 10; i++)
		sel[i] = 0;
}

void dfs(int y, int x, int myN, int dist) {

	//고객을 모두 방문했습니다.
	if (myN == n) {

		int val = y - home[0] > 0 ? y - home[0] : home[0] - y;
		dist += val;
		val = x - home[1] > 0 ? x - home[1] : home[1] - x;
		dist += val;

		if (ans == 0) //초반에는 그냥 넣어줄게요.
			ans = dist;
		else if (ans > dist)
			ans = dist;

		return;
	}

	//지금 구하고 있는 거리가 너무 큰거임..
	if (ans != 0 && ans < dist)
		return; //어차피 해봐야.. 크니까요..

	for (int i = 0; i < n; i++) {
		if (sel[i] == 1) continue;
		sel[i] = 1;

		int myY = customer[i].first;
		int myX = customer[i].second;
		int myDist = 0;
		if (y - myY > 0) myDist += y - myY;
		else myDist += myY - y;

		if (x - myX > 0) myDist += x - myX;
		else myDist += myX - x;

		dfs(myY, myX, myN + 1, dist + myDist);

		sel[i] = 0;
	}
}

int main(void) {

	int tc;
	cin >> tc;
	for (int t = 1; t <= tc; t++) {
		cin >> n;

		//회사 위치
		for (int i = 0; i < 2; i++)
			cin >> company[i];
		
		//집 위치
		for (int i = 0; i < 2; i++)
			cin >> home[i];
		
		//고객 위치
		for (int i = 0; i < n; i++) {
			int y, x;
			cin >> y >> x;
			customer.push_back({ y, x });
		}

		dfs(company[0], company[1], 0, 0);
		cout << "#" << t << " " << ans << endl;

		ans = 0;
		customer.clear();
		selInit();
	}
	
	return 0;
}
