#include<iostream>
#include<vector>
#include<queue>

using namespace std;

/*
4112. 이상한 피라미드 탐험
*/

//146줄까지 만들자. 피라미드 모양을 만들 것입니다.
int map[147][147];
int dir[6][2] = { {-1, 0}, {1, 0}, {0, -1}, {0, 1}, {-1, -1}, {1, 1} };
vector<int> conn[147];
//int check[11000];//넉넉히 만들어줬습니다..
//
//void initcheck() {
//	for (int i = 0; i < 11000; i++)
//		check[i] = 0;
//}

bool isinside(int y, int x) {
	if (y >= 1 && y <= 146 && x >= 1 && x <= 146)
		return true;
	else return false;
}
//
//int bfs(int a, int b) {
//	queue<int> q;
//	q.push(a);
//	check[a] = 1;
//
//	while (!q.empty()) {
//		int now = q.front();
//		q.pop();
//
//		if (now == b) {
//			return check[now] - 1;
//			//cout << check[now] - 1 << endl;
//		}
//
//		for (int i = 0; i < conn[now].size(); i++) {
//			int next = conn[now][i];
//			if (check[next] == 0) {
//				check[next] = check[now] + 1;
//				q.push(next);
//			}
//		}
//	}
//}

int main(void) {
	int tc;
	//cin >> tc;

	//일단 어차피 10000까지가 최대이고 먼저 초기화를 시켜놓습니다.
	int num = 1;
	for (int i = 1; i <= 146; i++) {
		for (int j = 1; j <= i; j++) {
			map[i][j] = num;
			num++;
		}
	}
	//cout << num << endl; //일단 10000을 넘는 것을 확인했어요.

	//최대 연결되는 애는 여섯 개겠죵?
	for (int i = 1; i <= 146; i++) {
		for (int j = 1; j <= i; j++) {
			for (int k = 0; k < 6; k++) {
				int y = i + dir[k][0];
				int x = j + dir[k][1];
				//cout << map[i][j] << " : " << map[y][x] << endl;
				//cout << map[i][j] << endl;

				if (isinside(y, x) && map[y][x] != 0) {
					conn[map[i][j]].push_back(map[y][x]);
					//cout << map[y][x] << "를 추가하자." << endl;
				}
			}
		}
	}

	cout << "왜 안돼.." << endl;
	
	for (int i = 1; i <= 10; i++) {
		for (int j = 0; j < conn[i].size(); j++) {
			cout << conn[i][j] << " ";
		}
		cout << endl;
	}

	//for (int t = 1; t <= tc; t++) {
	//	int a, b;
	//	cin >> a >> b;
	//	int ans = bfs(a, b);
	//	//체크 초기화도 필요합니다.
	//	cout << "#" << t << " " << ans << endl;
	//	initcheck();
	//}

	return 0;
}

저장하면 부담이 너무 커지는 듯.
그래서 저장 안하는걸로 바꿨는데도 시간초과됐음.
망할..솔직히 정답은 나오는데 1000개를 1초에 내라니 빡빡하네.

#include<iostream>
#include<vector>
#include<queue>

using namespace std;

/*
4112. 이상한 피라미드 탐험
*/

//146줄까지 만들자. 피라미드 모양을 만들 것입니다.
int map[147][147];
int dir[6][2] = { { -1, 0 },{ 1, 0 },{ 0, -1 },{ 0, 1 },{ -1, -1 },{ 1, 1 } };
vector<int> conn[147];
int check[11000];//넉넉히 만들어줬습니다..

void initcheck() {
	for (int i = 0; i < 11000; i++)
		check[i] = 0;
}

bool isinside(int y, int x) {
	if (y >= 1 && y <= 146 && x >= 1 && x <= 146)
		return true;
	else return false;
}

pair<int, int> findPos(int num) {
	for (int i = 1; i <= 146; i++) {
		for (int j = 1; j <= i; j++) {
			if (num == map[i][j]) {
				return { i, j };
			}
		}
	}
}

int bfs(int a, int b) {
	queue<int> q;
	q.push(a);
	check[a] = 1;

	while (!q.empty()) {
		int now = q.front();
		q.pop();
		pair<int, int> numbers = findPos(now);
		int i = numbers.first;
		int j = numbers.second;

		if (now == b) {
			return check[now] - 1;
			//cout << check[now] - 1 << endl;
		}

		for (int k = 0; k < 6; k++) {
			int y = i + dir[k][0];
			int x = j + dir[k][1];
			//cout << map[i][j] << " : " << map[y][x] << endl;
			//cout << map[i][j] << endl;
			int next = map[y][x];
			if (isinside(y, x) && map[y][x] != 0) {
				if (check[next] == 0) {
					check[next] = check[now] + 1;
					q.push(next);
				}
				//cout << map[y][x] << "를 추가하자." << endl;
			}
		}

		/*for (int i = 0; i < conn[now].size(); i++) {
			int next = conn[now][i];
			if (check[next] == 0) {
				check[next] = check[now] + 1;
				q.push(next);
			}
		}*/
	}
}

int main(void) {
	int tc;
	cin >> tc;

	//일단 어차피 10000까지가 최대이고 먼저 초기화를 시켜놓습니다.
	int num = 1;
	for (int i = 1; i <= 146; i++) {
		for (int j = 1; j <= i; j++) {
			map[i][j] = num;
			num++;
		}
	}
	//cout << num << endl; //일단 10000을 넘는 것을 확인했어요.

	//최대 연결되는 애는 여섯 개겠죵?
	/*for (int i = 1; i <= 10; i++) {
		for (int j = 1; j <= i; j++) {
			for (int k = 0; k < 6; k++) {
				int y = i + dir[k][0];
				int x = j + dir[k][1];
				//cout << map[i][j] << " : " << map[y][x] << endl;
				//cout << map[i][j] << endl;

				if (isinside(y, x) && map[y][x] != 0) {
					conn[map[i][j]].push_back(map[y][x]);
					//cout << map[y][x] << "를 추가하자." << endl;
				}
			}
		}
	}*/

	//cout << "왜 안돼.." << endl;

	//for (int i = 1; i <= 10; i++) {
	//	for (int j = 0; j < conn[i].size(); j++) {
	//		cout << conn[i][j] << " ";
	//	}
	//	cout << endl;
	//}

	for (int t = 1; t <= tc; t++) {
		int a, b;
		cin >> a >> b;
		int ans = bfs(a, b);
		//체크 초기화도 필요합니다.
		cout << "#" << t << " " << ans << endl;
		initcheck();
	}

	return 0;
}
