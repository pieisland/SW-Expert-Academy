#include <iostream>
#include <vector>
using namespace std;

/*
200428
5644. [모의 SW 역량테스트] 무선 충전
그냥.. 어떤 알고리즘이라기 보다는
겹치는 경우와 아닌 경우를 나눠야되고
배터리에 대한 정보를 구조체로 저장해서 사용하면
되는 문제라 해야될까.
사람이 두 명 밖에 없어서 for문으로 모든 경우의 수를 하긴 했는데
이런 걸 바란 게 아닐지도.
*/

int m, a;//이동 횟수와 배터리 개수
int dir[5][2] = { {0, 0}, {-1, 0}, {0, 1}, {1, 0}, {0, -1} };
int moveInfo[2][101];

struct bc{
	int y, x; //위치
	int c;//충전 범위
	int p;//처리량
}typedef BC;

BC bc[8];

int func(int pos[2][2]) {

	vector<int> v[2];

	for (int i = 0; i < 2; i++) {
		for (int j = 0; j < a; j++) {
			int dist = bc[j].c;
			int dy = pos[i][0] - bc[j].y;
			if (dy < 0) dy = -dy;
			int dx = pos[i][1] - bc[j].x;
			if (dx < 0) dx = -dx;
			if (dy + dx <= dist) {
				//받을 수 있는 곳이구나.
				v[i].push_back(j);
			}
		}
	}

	int ret = 0;
	int val = 0;
	if (v[0].size() == 0 && v[1].size()!=0) {
		for (int i = 0; i < v[1].size(); i++) {
			val = bc[v[1][i]].p;
			if (val > ret) ret = val;
		}
	}
	else if (v[0].size() != 0 && v[1].size() == 0) {
		for (int i = 0; i < v[0].size(); i++) {
			val = bc[v[0][i]].p;
			if (val > ret) ret = val;
		}
	}
	else if (v[0].size() == 0 && v[1].size() == 0) {
		ret = 0;
	}
	else {//둘 다 0이 아닌 경우.
		for (int i = 0; i < v[0].size(); i++) {
			for (int j = 0; j < v[1].size(); j++) {
				if (v[0][i] == v[1][j]) {
					//같은 걸 선택했다면 
					val = bc[v[0][i]].p;//반반인데
					if (val > ret) ret = val;
				}
				else
				{
					val = bc[v[0][i]].p + bc[v[1][j]].p;
					if (val > ret) ret = val;
				}
			}
		}
	}

	return ret;
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	int tc;
	cin >> tc;
	for (int t = 1; t <= tc; t++) {
		cin >> m >> a;
		
		//2명의 사용자
		moveInfo[0][0] = 0;
		moveInfo[1][0] = 0;

		for (int i = 0; i < 2; i++) {
			//m개의 이동정보.
			for (int j = 1; j <= m; j++) {
				cin >> moveInfo[i][j];
			}
		}
		
		//a개의 배터리 정보를 받는다.
		for (int i = 0; i < a; i++) {
			cin >> bc[i].x >> bc[i].y >> bc[i].c >> bc[i].p;
		}

		//맨 처음 위치에서도 하기 때문에..
		//a의 위치가.. 지금은 (1,1) b의 위치가 (10, 10) 입니다.
		int answer = 0; 
		int pos[2][2] = { 1, 1, 10, 10 };
		for (int i = 0; i <= m; i++) {
			for (int j = 0; j < 2; j++) {
				int d = moveInfo[j][i];
				pos[j][0] = pos[j][0] + dir[d][0];
				pos[j][1] = pos[j][1] + dir[d][1];
			}

			int val = func(pos);
			answer += val;
		}

		cout << "#" << t << " " << answer << '\n';
	}

	return 0;
}
