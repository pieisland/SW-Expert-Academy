#include <iostream>
#include <vector>
using namespace std;

/*
20.05.03.일
5650. [모의 SW 역량테스트] 핀볼 게임
한 칸 한 칸씩 움직일 수 있도록 하고
벽을 만났을 때 어느 방향으로 변하는지를
미리 저장해두고 움직이게 하면 되는 문제.
*/

int n;
int map[100][100];
int dir[4][2] = { {-1, 0}, {1, 0}, {0, -1}, {0, 1} };
int reverseDir[4] = { 1, 0, 3, 2 };//하 상 우 좌
int newDir[6][4] = { {0, 0, 0, 0}, {1, 3, 0, 2}, {3, 0, 1, 2}, {2, 0, 3, 1}, {1, 2, 3, 0}, {1, 0, 3, 2} };
int answer;
vector<pair<int, int>> wormHole[5];

bool isinside(int y, int x) {
	if (y >= 0 && y < n && x >= 0 && x < n) return true;
	else return false;
}

void pinBall(int y, int x, int d) {
	//시작 위치와 방향을 받아온다.
	int col = 0;//충돌 횟수를 저장한다.
	int cy = y;
	int cx = x;
	int cd = d;
	while (1) {//한 칸씩 움직인다고 할께.. 비효율 적일까?
		//cout << cy << " " << cx << endl;

		int ny = cy + dir[cd][0];
		int nx = cx + dir[cd][1];

		if (ny == y && nx == x) {
			break;
			//시작 위치로 돌아왔거나
		}

		//벽을 만나버린 걸로 치려구요..
		//귀찮아.. 헷갈리니까 그냥 삐져나온 거라면 방향 바꿔줄게.
		if (!isinside(ny, nx)) {
			col++;
			cd = reverseDir[cd];
			cy = ny;
			cx = nx;
			continue;
			//방향만 바꾼거고 어차피 cy cx에 적용 안했으니까
			//여기서 미친듯이 아무것도 못할 리는 없겠죠.
		}

		//블록이라면
		if (1 <= map[ny][nx] && map[ny][nx] <= 5) {
			col++;
			//내가 나가야 할 새로운 방향을 구한다.
			int dd = newDir[map[ny][nx]][cd];
			cd = dd;//방향 전환해준다.
			cy = ny;
			cx = nx;
		}
		else if (6 <= map[ny][nx] && map[ny][nx] <= 10) {
			//웜홀이라면 다른 쌍을 찾아야되는데..
			//저장하고있어야되나..
			//그 위치로 바로 이동해야되는데..?
			int holeNum = map[ny][nx];
			holeNum -= 6;
			if (wormHole[holeNum][0].first == ny && wormHole[holeNum][0].second == nx) {
				cy = wormHole[holeNum][1].first;
				cx = wormHole[holeNum][1].second;
			}
			else {
				cy = wormHole[holeNum][0].first;
				cx = wormHole[holeNum][0].second;
			}
			//처음부터 다시 찾기엔 시간이 많이 걸릴텐데..?
			//cy;
			//cx;
		}
		else if (map[ny][nx] == -1) {
			//블랙홀이면 종료이지요..
			break;
		}
		else if(map[ny][nx]==0){
			//별 일 없이 그냥 다른 값들이면.. 그냥 0이겠지.
			//움직인거고
			cy = ny;
			cx = nx;
		}
	}

	//cout << "종료" << endl;
	//cout << "위치: " << y << " " << x << " "<<"방향: "<<d<<" 구한 값: " << col << endl;
	if (col > answer) answer = col;
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	int tc;
	cin >> tc;
	for (int t = 1; t <= tc; t++) {
		cin >> n;
		
		//6부터 10까지는 웜홀이고 -1은 블랙홀이고
		//처음 시작 위치로 돌아오거나
		//블랙홀을 만나면 끝
		//원하는 값은 외벽이나 벽...들에 몇 번을 부딪쳤는지.
		//그럼 시작할 위치를 가지고 있어야 할텐데.
		vector<pair<int, int >> startPos;
		for (int i = 0; i < 5; i++) {
			wormHole[i].clear();
		}
		answer = 0;
		//0이면 다 넣는 것도 있겠지만.
		//하지만 그건너무 비효율적이라서.. 좀 다르게 하고싶은데.
		//아니다.. 상하좌우를 모두 생각한다면 결국 모든 위치에서 해야할 듯

		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				cin >> map[i][j];
				if (map[i][j] == 0) {
					startPos.push_back({ i, j });
				}
				else if (map[i][j] >= 6 && map[i][j] <= 10) {
					//웜홀이라면
					int tmp = map[i][j] - 6;//걍.. 6 빼주면 0에서 4가 되니까
					wormHole[tmp].push_back({ i, j });
				}
			}
		}
		
		for (int i = 0; i < startPos.size(); i++) {
			for (int j = 0; j < 4; j++) {
				//모든 시작위치에서 상하좌우로 시작해볼까?
				//cout << "시작" << endl;
				pinBall(startPos[i].first, startPos[i].second, j);
			}
		}

		cout << "#" << t << " " << answer << '\n';
	}

	return 0;
}
